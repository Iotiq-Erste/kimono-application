### Scenario 1: Obtain Token For Customer
POST https://keycloak.iotiq.dev/realms/kimono/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type = {{grantType}} &
client_id = {{clientId}} &
password = {{customerPassword}} &
username = {{customerUsername}} &
client_secret = {{clientSecret}}

> {%
    client.global.set("customer_auth_token", response.body.access_token);
    client.test("Obtain Token", function () {
        client.assert(response.status === 200, "HTTP response code is 200");
        client.assert(response.body.hasOwnProperty("access_token"), "Access token is obtained");
    });
%}

### Scenario 2: Obtain Token For Company
POST https://keycloak.iotiq.dev/realms/kimono/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type = {{grantType}} &
client_id = {{clientId}} &
password = {{password}} &
username = {{username}} &
client_secret = {{clientSecret}}

> {%
    client.global.set("company_auth_token", response.body.access_token);
    client.test("Obtain Token", function () {
        client.assert(response.status === 200, "HTTP response code is 200");
        client.assert(response.body.hasOwnProperty("access_token"), "Access token is obtained");
    });
%}


### Scenario 3: Get All Orders
GET {{baseUrl}}/api/v1/orders
Authorization: Bearer {{customer_auth_token}}
Content-Type: application/json

> {%
    client.test("Testing total number of orders" ,function() {
        client.assert(response.status === 200, "Status code is 200");
    });
    client.global.set("orderSize", response.body.totalElements);
%}


### Scenario 4: Create New Product
POST {{baseUrl}}/api/v1/seller/products
Authorization: Bearer {{company_auth_token}}
Content-Type: application/json

{
  "title": "Sample Product 1",
  "description": "Sample Description",
  "price": {
    "amount": 20,
    "currency": "EUR"
  },
  "imageUrl": "http://example.com/image.jpg",
  "ageGroup": {
    "adultAgeGroup": "THIRTY_TO_FOURTYFIVE",
    "childrenAgeGroup": "TWO_TO_SIX_YEARS"
  },
  "applicationAreaGroup": {
    "applicationArea": "OTHERS",
    "usageCycle": "ONE_TIME"
  },
  "brand": "BEYMEN",
  "category": "JEANS",
  "certifications": [
    "BLUESIGN",
    "TOXPROOF"
  ],
  "color": "RED",
  "composition": {
    "activeSubstanceAreas": [
      "COMPLETE"
    ],
    "activeSubstances": [
      "CHITOSAN"
    ],
    "activeSubstancePlacements": [
      "SERUM"
    ],
    "activeSubstanceReleases": [
      "DIFFUSING"
    ],
    "compositions": [
      "PATCHWORK"
    ],
    "staggerings": [
      "TEMPORAL"
    ]
  },
  "design": {
    "designAppearance": "DYNAMIC",
    "designColor": "COLORFUL"
  },
  "designBodyParts": [
    "SEAMLESS"
  ],
  "fiberTypes": [
    "COTTON",
    "MODAL"
  ],
  "gender": "MALE",
  "haptics": {
    "elasticity": "ELASTIC",
    "fineness": "FINE",
    "lightweight": "LIGHT",
    "lintFree": "FREE",
    "scratchy": "SMOOTH",
    "seamFeelable": "FEELABLE",
    "softness": "SOFT",
    "uniform": "MOSTLY"
  },
  "material": "COTTON",
  "materialBehavior": {
    "abrasionResistant": "VERY",
    "absorbency": "VERY",
    "antistatic": "VERY",
    "breathable": "VERY",
    "colorfast": "VERY",
    "moistureTransporting": "VERY",
    "odorNeutralizing": "VERY",
    "scratchResistant": "VERY",
    "sweatWicking": "VERY",
    "washable": "VERY"
  },
  "materialParameter": {
    "thickness": 20,
    "flexibility": 20,
    "breathability": 20,
    "moistureWicking": 20
  },
  "motif": "ANIMALS",
  "neurodermatitis": "STAGE_ONE_DRY_SKIN",
  "oekotexStandard": "PRODUCT_CLASS_1",
  "priceRange": "STANDARD",
  "rating": "FOUR_POINT_AND_OVER",
  "sizes": [
    "XXS"
  ],
  "specificBodyParts": [
    "SCALP",
    "FACE"
  ],
  "specificFunctionalities": [
    "ANTIBACTERIAL",
    "ANTIVIRAL"
  ],
  "sustainability": {
    "environmentalCompatibilities": [
      "ENVIRONMENTAL_COMPATIBILITY",
      "BIODEGRADABLE"
    ],
    "lifeCycles": [
      "LIFE_CYCLE"
    ],
    "regionalityList": [
      "MADE_IN_GERMANY"
    ],
    "resourceConsumptions": [
      "LOW_USAGE"
    ],
    "socialEthics": [
      "FAIR_WAGES"
    ],
    "sustainabilityCompositions": [
      "RARE_MATERIALS"
    ],
    "sustainabilityLightweights": [
      "LIGHTWEIGHT"
    ],
    "skills": [
      "FINISHING"
    ]
  }
}
> {%
    client.test("Create new product" ,function() {
        client.assert(response.status === 201, "Status code is 201");
        client.assert(response.body.hasOwnProperty("newProductID"), "Product has been created");
    });
    client.global.set("newProductID1", response.body.newProductID);
%}

### Scenario 5: Update Cart by Adding Cart Item
PUT {{baseUrl}}/api/v1/cart
Authorization: Bearer {{customer_auth_token}}
Content-Type: application/json

{
  "cartItems": [
    {
      "productId":"{{newProductID1}}",
      "quantity":1
    }
  ]
}
> {%
    client.test("Product has been updated" ,function() {
        client.assert(response.status === 200, "Status code is 200");
    });
%}


### Scenario 6: Get Cart to Validate
GET {{baseUrl}}/api/v1/cart
Authorization: Bearer {{customer_auth_token}}
Content-Type: application/json

> {%
    client.test("Testing add cart item to cart " ,function() {
        client.assert(response.status === 200, "Status code is 200");
        client.assert(response.body.cartItems[0].product.id == client.global.get("newProductID1"), "Update failed, added product did not match");
    });
%}


### Scenario 7: Create Order
POST {{baseUrl}}/api/v1/orders
Authorization: Bearer {{customer_auth_token}}
Content-Type: application/json

{
  "cargoPrice": 100,
  "deliveryType": "",
  "deliveryAddressType": "Home",
  "deliveryAddress": "",
   "cartItems": [
   {
     "productId":"{{newProductID1}}",
     "quantity":1
   }
  ],
  "cartTotalPrice":20
}

> {%
    client.test("Testing create order " ,function() {
        client.assert(response.status === 201, "Status code is 201");
        client.assert(response.body.hasOwnProperty("newOrderId"), "Order hasn't been created");
        client.assert(response.body.hasOwnProperty("orderNumber"), "Order hasn't been created");
    });
    client.global.set("newOrderId", response.body.newOrderId);
%}

### Scenario 8: Get Order By ID
GET {{baseUrl}}/api/v1/orders/{{newOrderId}}
Authorization: Bearer {{customer_auth_token}}
Content-Type: application/json


> {%
    client.test("Testing get order by id " ,function() {
        client.assert(response.status === 200, "Status code is 200");
        client.assert(response.body.id == client.global.get("newOrderId"), "Get one order failed, created order id did not match with requested order id");
    });
%}

### Scenario 9: Update Order
PUT {{baseUrl}}/api/v1/orders/{{newOrderId}}
Authorization: Bearer {{customer_auth_token}}
Content-Type: application/json

{
  "deliveryAddressType":"Work adress",
  "deliveryAddress": "Sisli/Istanbul",
  "deliveryStatus": "ORDER_CONFIRMED"
}

> {%
    client.test("Order has been updated" ,function() {
        client.assert(response.status === 200, "Status code is 200");
    });
%}

### Scenario 10: Get Order By ID
GET {{baseUrl}}/api/v1/orders/{{newOrderId}}
Authorization: Bearer {{customer_auth_token}}
Content-Type: application/json

> {%
    client.test("Testing updated fields of order " ,function() {
        client.assert(response.status === 200, "Status code is 200");
        client.assert(response.body.deliveryAddressType == "Work adress", "Updated failed, Delivery address type did not match with updated order");
        client.assert(response.body.deliveryAddress == "Sisli/Istanbul", "Updated failed, Delivery address did not match with updated order");
        client.assert(response.body.deliveryStatus == "ORDER_CONFIRMED", "Updated failed, Delivery status did not match with updated order");
    });
%}


### Scenario 11: Delete Order
DELETE {{baseUrl}}/api/v1/seller/products/{{newProductID1}}
Authorization: Bearer {{company_auth_token}}
Content-Type: application/json

> {%
    client.test("Product has been deleted" ,function() {
        client.assert(response.status === 204, "Status code is 204");
    });
%}

### Scenario 12: Update Cart by Deleting Cart Item
PUT {{baseUrl}}/api/v1/cart
Authorization: Bearer {{customer_auth_token}}
Content-Type: application/json

{
  "cartItems": []
}

### Scenario 13: Delete Product
DELETE {{baseUrl}}/api/v1/seller/products/{{newProductID1}}
Authorization: Bearer {{company_auth_token}}
Content-Type: application/json

###