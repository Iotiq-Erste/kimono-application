### Scenario 1: Obtain Token
POST https://keycloak.iotiq.dev/realms/kimono/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type = {{grantType}} &
client_id = {{clientId}} &
password = {{customerPassword}} &
username = {{customerUsername}} &
client_secret = {{clientSecret}}

> {%
    client.global.set("auth_token", response.body.access_token);
    client.test("Obtain Token", function () {
        client.assert(response.status === 200, "HTTP response code is 200");
        client.assert(response.body.hasOwnProperty("access_token"), "Access token is obtained");
    });
%}

### Scenario 2: Get Current Customer's Product Demands
GET {{baseUrl}}/api/v1/product-demands
Authorization: Bearer {{auth_token}}
Content-Type: application/json

> {%
    client.test("Testing customer's total number of product demand", function () {
        client.assert(response.status === 200, "Status code is 200");
    });
    client.global.set("customersTotalDemands", response.body.page.totalElements);
%}

### Scenario 3: Create First Product Demand
POST {{baseUrl}}/api/v1/product-demands
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "ageGroup": {
    "adultAgeGroup": "THIRTY_TO_FOURTYFIVE",
    "childrenAgeGroup": "TWO_TO_SIX_YEARS"
  },
  "applicationAreaGroup": {
    "applicationArea": "WORK_CLOTHING",
    "frequency": "ONE_TIME"
  },
  "brand": "BEYMEN",
  "category": "JEANS",
  "certifications": [
    "BLUESIGN",
    "TOXPROOF"
  ],
  "color": "RED",
  "composition": {
    "activeSubstanceAreas": [
      "COMPLETE"
    ],
    "activeSubstances": [
      "CHITOSAN"
    ],
    "activeSubstancePlacements": [
      "SERUM"
    ],
    "activeSubstanceReleases": [
      "DIFFUSING"
    ],
    "compositions": [
      "PATCHWORK"
    ],
    "staggerings": [
      "TEMPORAL"
    ]
  },
  "design": {
    "designAppearance": "DYNAMIC",
    "designColor": "COLORFUL"
  },
  "designBodyParts": [
    "SEAMLESS"
  ],
  "fiberTypes": [
    "COTTON",
    "MODAL"
  ],
  "gender": "MALE",
  "haptics": {
    "elasticity": "ELASTIC",
    "fineness": "FINE",
    "lightweight": "LIGHT",
    "lintFree": "FREE",
    "scratchy": "SMOOTH",
    "seamFeelable": "FEELABLE",
    "softness": "SOFT",
    "uniform": "MOSTLY"
  },
  "material": "COTTON",
  "materialBehavior": {
    "abrasionResistant": "VERY",
    "absorbency": "VERY",
    "antistatic": "VERY",
    "breathable": "VERY",
    "colorfast": "VERY",
    "moistureTransporting": "VERY",
    "odorNeutralizing": "VERY",
    "scratchResistant": "VERY",
    "sweatWicking": "VERY",
    "washable": "VERY"
  },
  "materialParameter": "THICKNESS",
  "motif": "ANIMALS",
  "neurodermatitis": "STAGE_ONE_DRY_SKIN",
  "oekotexStandard": "PRODUCT_CLASS_1",
  "priceRange": "STANDARD",
  "rating": "FOUR_POINT_AND_OVER",
  "sizes": [
    "XXS"
  ],
  "specificBodyParts": [
    "SCALP",
    "FACE"
  ],
  "specificFunctionalities": [
    "ANTIBACTERIAL",
    "ANTIVIRAL"
  ],
  "sustainability": {
    "environmentalCompatibilities": [
      "ENVIRONMENTAL_COMPATIBILITY",
      "BIODEGRADABLE"
    ],
    "lifeCycles": [
      "LIFE_CYCLE"
    ],
    "regionalityList": [
      "MADE_IN_GERMANY"
    ],
    "resourceConsumptions": [
      "LOW_USAGE"
    ],
    "socialEthics": [
      "FAIR_WAGES"
    ],
    "sustainabilityCompositions": [
      "RARE_MATERIALS"
    ],
    "sustainabilityLightweights": [
      "LIGHTWEIGHT"
    ]
  }
}

> {%
    client.test("Creating product demand", function () {
        client.assert(response.status === 201, "Status code is 201");
    });
    client.global.set("customersTotalDemands", client.global.get("customersTotalDemands") + 1);
    client.global.set("newProductDemandID1", response.body.newProductDemandID);

%}

### Scenario 4: Create Second Product Demand
POST {{baseUrl}}/api/v1/product-demands
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "ageGroup": {
    "adultAgeGroup": "THIRTY_TO_FOURTYFIVE",
    "childrenAgeGroup": "TWO_TO_SIX_YEARS"
  },
  "applicationAreaGroup": {
    "applicationArea": "WORK_CLOTHING",
    "frequency": "ONE_TIME"
  },
  "brand": "BEYMEN",
  "category": "JEANS",
  "certifications": [
    "BLUESIGN",
    "TOXPROOF"
  ],
  "color": "RED",
  "composition": {
    "activeSubstanceAreas": [
      "COMPLETE"
    ],
    "activeSubstances": [
      "CHITOSAN"
    ],
    "activeSubstancePlacements": [
      "SERUM"
    ],
    "activeSubstanceReleases": [
      "DIFFUSING"
    ],
    "compositions": [
      "PATCHWORK"
    ],
    "staggerings": [
      "TEMPORAL"
    ]
  },
  "design": {
    "designAppearance": "DYNAMIC",
    "designColor": "COLORFUL"
  },
  "designBodyParts": [
    "SEAMLESS"
  ],
  "fiberTypes": [
    "COTTON",
    "MODAL"
  ],
  "gender": "MALE",
  "haptics": {
    "elasticity": "ELASTIC",
    "fineness": "FINE",
    "lightweight": "LIGHT",
    "lintFree": "FREE",
    "scratchy": "SMOOTH",
    "seamFeelable": "FEELABLE",
    "softness": "SOFT",
    "uniform": "MOSTLY"
  },
  "material": "COTTON",
  "materialBehavior": {
    "abrasionResistant": "VERY",
    "absorbency": "VERY",
    "antistatic": "VERY",
    "breathable": "VERY",
    "colorfast": "VERY",
    "moistureTransporting": "VERY",
    "odorNeutralizing": "VERY",
    "scratchResistant": "VERY",
    "sweatWicking": "VERY",
    "washable": "VERY"
  },
  "materialParameter": "THICKNESS",
  "motif": "ANIMALS",
  "neurodermatitis": "STAGE_ONE_DRY_SKIN",
  "oekotexStandard": "PRODUCT_CLASS_1",
  "priceRange": "STANDARD",
  "rating": "FOUR_POINT_AND_OVER",
  "sizes": [
    "XXS"
  ],
  "specificBodyParts": [
    "SCALP",
    "FACE"
  ],
  "specificFunctionalities": [
    "ANTIBACTERIAL",
    "ANTIVIRAL"
  ],
  "sustainability": {
    "environmentalCompatibilities": [
      "ENVIRONMENTAL_COMPATIBILITY",
      "BIODEGRADABLE"
    ],
    "lifeCycles": [
      "LIFE_CYCLE"
    ],
    "regionalityList": [
      "MADE_IN_GERMANY"
    ],
    "resourceConsumptions": [
      "LOW_USAGE"
    ],
    "socialEthics": [
      "FAIR_WAGES"
    ],
    "sustainabilityCompositions": [
      "RARE_MATERIALS"
    ],
    "sustainabilityLightweights": [
      "LIGHTWEIGHT"
    ]
  }
}

> {%
    client.test("Creating product demand", function () {
        client.assert(response.status === 201, "Status code is 201");
    });
    client.global.set("customersTotalDemands", client.global.get("customersTotalDemands") + 1);
    client.global.set("newProductDemandID2", response.body.newProductDemandID);

%}

### Scenario 5: Get Current Customer's Product Demands
GET {{baseUrl}}/api/v1/product-demands
Authorization: Bearer {{auth_token}}
Content-Type: application/json

> {%
    client.test("Testing customer's total number of product demand", function () {
        client.assert(response.status === 200, "Status code is 200");
        client.assert(client.global.get("customersTotalDemands") == response.body.page.totalElements)
    });
%}

### Scenario 6: Get Current Customer's Pageable Product Demands
GET {{baseUrl}}/api/v1/product-demands?page=0&size=20
Authorization: Bearer {{auth_token}}
Content-Type: application/json

> {%
    client.test("Testing customer's total number of product demand", function () {
        client.assert(response.status === 200, "Status code is 200");
        client.assert(response.body.page.totalElements === client.global.get("customersTotalDemands"), "The customer's total element of product demand didnt match");
    });
%}

### Scenario 7: Get Created First Product Demand for confirmation
GET {{baseUrl}}/api/v1/product-demands/{{newProductDemandID1}}
Authorization: Bearer {{auth_token}}
Content-Type: application/json

> {%
    client.test("Testing created product demand", function () {
        client.assert(response.status === 200, "Status code is 200");
        client.assert(response.body.ageGroup.adultAgeGroup === "THIRTY_TO_FOURTYFIVE", "Creation failed, adultAgeGroup does not match");
        client.assert(response.body.ageGroup.childrenAgeGroup === "TWO_TO_SIX_YEARS", "Creation failed, childrenAgeGroup does not match");
        client.assert(response.body.applicationAreaGroup.applicationArea === "WORK_CLOTHING", "Creation failed, applicationArea does not match");
        client.assert(response.body.applicationAreaGroup.frequency === "ONE_TIME", "Creation failed, frequency does not match");
        client.assert(response.body.brand === "BEYMEN", "Creation failed, brand does not match");
        client.assert(response.body.category === "JEANS", "Creation failed, category does not match");
        client.assert(response.body.certifications[0] === "BLUESIGN", "Creation failed, certifications does not match");
        client.assert(response.body.certifications[1] === "TOXPROOF", "Creation failed, certifications does not match");
        client.assert(response.body.composition.activeSubstanceAreas[0] === "COMPLETE", "Creation failed, activeSubstanceAreas does not match");
        client.assert(response.body.composition.activeSubstances[0] === "CHITOSAN", "Creation failed, activeSubstances does not match");
        client.assert(response.body.composition.activeSubstancePlacements[0] === "SERUM", "Creation failed, activeSubstancePlacements does not match");
        client.assert(response.body.composition.activeSubstanceReleases[0] === "DIFFUSING", "Creation failed, activeSubstanceReleases does not match");
        client.assert(response.body.composition.compositions[0] === "PATCHWORK", "Creation failed, staggerings does not match");
        client.assert(response.body.composition.staggerings[0] === "TEMPORAL", "Creation failed, staggerings does not match");
        client.assert(response.body.design.designAppearance === "DYNAMIC", "Creation failed, designAppearance does not match");
        client.assert(response.body.design.designColor === "COLORFUL", "Creation failed, designColor does not match");
        client.assert(response.body.designBodyParts[0] === "SEAMLESS", "Creation failed, designBodyParts does not match");
        client.assert(response.body.fiberTypes[0] === "COTTON", "Creation failed, fiberTypes does not match");
        client.assert(response.body.fiberTypes[1] === "MODAL", "Creation failed, fiberTypes does not match");
        client.assert(response.body.gender === "MALE", "Creation failed, gender does not match");
        client.assert(response.body.haptics.elasticity === "ELASTIC", "Creation failed, elasticity does not match");
        client.assert(response.body.haptics.fineness === "FINE", "Creation failed, fineness does not match");
        client.assert(response.body.haptics.lightweight === "LIGHT", "Creation failed, lightweight does not match");
        client.assert(response.body.haptics.lintFree === "FREE", "Creation failed, lintFree does not match");
        client.assert(response.body.haptics.scratchy === "SMOOTH", "Creation failed, scratchy does not match");
        client.assert(response.body.haptics.seamFeelable === "FEELABLE", "Creation failed, seamFeelable does not match");
        client.assert(response.body.haptics.softness === "SOFT","Creation failed, softness does not match");
        client.assert(response.body.haptics.uniform === "MOSTLY", "Creation failed, uniform does not match");
        client.assert(response.body.materialBehavior.abrasionResistant === "VERY", "Creation failed, abrasionResistant does not match");
        client.assert(response.body.materialBehavior.absorbency === "VERY", "Creation failed, absorbency does not match");
        client.assert(response.body.materialBehavior.antistatic === "VERY", "Creation failed, antistatic does not match");
        client.assert(response.body.materialBehavior.breathable === "VERY", "Creation failed, breathable does not match");
        client.assert(response.body.materialBehavior.colorfast === "VERY","Creation failed, colorfast does not match");
        client.assert(response.body.materialBehavior.moistureTransporting === "VERY", "Creation failed, moistureTransporting does not match");
        client.assert(response.body.materialBehavior.odorNeutralizing === "VERY", "Creation failed, odorNeutralizing does not match");
        client.assert(response.body.materialBehavior.scratchResistant === "VERY", "Creation failed, scratchResistant does not match");
        client.assert(response.body.materialBehavior.sweatWicking === "VERY", "Creation failed, sweatWicking does not match");
        client.assert(response.body.materialBehavior.washable === "VERY", "Creation failed, washable does not match");
        client.assert(response.body.materialParameter === "THICKNESS", "Creation failed, materialParameter does not match");
        client.assert(response.body.motif === "ANIMALS", "Creation failed, motif does not match");
        client.assert(response.body.neurodermatitis === "STAGE_ONE_DRY_SKIN", "Creation failed, neurodermatitis does not match");
        client.assert(response.body.oekotexStandard === "PRODUCT_CLASS_1", "Creation failed, oekotexStandard does not match");
        client.assert(response.body.priceRange === "STANDARD", "Creation failed, priceRange does not match");
        client.assert(response.body.rating === "FOUR_POINT_AND_OVER", "Creation failed, rating does not match");
        client.assert(response.body.sizes[0] === "XXS", "Creation failed, sizes does not match");
        client.assert(response.body.specificBodyParts[0] === "SCALP", "Creation failed, specificBodyParts does not match");
        client.assert(response.body.specificBodyParts[1] === "FACE", "Creation failed, specificBodyParts does not match");
        client.assert(response.body.specificFunctionalities[0] === "ANTIBACTERIAL", "Creation failed, specificFunctionalities filter failed");
        client.assert(response.body.specificFunctionalities[1] === "ANTIVIRAL", "Creation failed, specificFunctionalities filter failed");
        client.assert(response.body.sustainability.environmentalCompatibilities[0] === "ENVIRONMENTAL_COMPATIBILITY", "Creation failed, environmentalCompatibilities filter failed");
        client.assert(response.body.sustainability.environmentalCompatibilities[1] === "BIODEGRADABLE", "Creation failed, environmentalCompatibilities filter failed");
        client.assert(response.body.sustainability.lifeCycles[0] === "LIFE_CYCLE", "Creation failed, lifeCycles filter failed");
        client.assert(response.body.sustainability.regionalityList[0] === "MADE_IN_GERMANY", "Creation failed, regionalityList filter failed");
        client.assert(response.body.sustainability.resourceConsumptions[0] === "LOW_USAGE", "Creation failed, resourceConsumptions filter failed");
        client.assert(response.body.sustainability.socialEthics[0] === "FAIR_WAGES", "Creation failed, socialEthics filter failed");
        client.assert(response.body.sustainability.sustainabilityCompositions[0] === "RARE_MATERIALS", "Creation failed, sustainabilityCompositions filter failed");
        client.assert(response.body.sustainability.sustainabilityLightweights[0] === "LIGHTWEIGHT", "Creation failed, sustainabilityLightweights filter failed");
    });
%}

### Scenario 8: Update First Product Demand
PUT {{baseUrl}}/api/v1/product-demands/{{newProductDemandID1}}
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "category": "JACKET",
  "gender": "UNISEX"
}
> {%
    client.test("Product demand has been updated" ,function() {
        client.assert(response.status === 200, "Status code is 200");
    });
%}

### Scenario 9: Get Updated Product Demands
GET {{baseUrl}}/api/v1/product-demands/{{newProductDemandID1}}
Authorization: Bearer {{auth_token}}
Content-Type: application/json


> {%
    client.test("Testing fields of updated product demand", function () {
        client.assert(response.body.category === "JACKET", "Update failed, category does not match");
        client.assert(response.body.gender === "UNISEX", "Update failed, gender does not match");
    });
%}

### Scenario 10: Delete First Product Demand
DELETE {{baseUrl}}/api/v1/product-demands/{{newProductDemandID1}}
Authorization: Bearer {{auth_token}}
Content-Type: application/json

> {%
    client.test("Product demand has been deleted" ,function() {
        client.assert(response.status === 200, "Status code is 200");
        client.global.set("customersTotalDemands", client.global.get("customersTotalDemands")-1);
        client.global.set("totalDemands", client.global.get("totalDemands")-1);
    });
%}

### Scenario 11: Get Customer's Product Demands
GET {{baseUrl}}/api/v1/product-demands
Authorization: Bearer {{auth_token}}
Content-Type: application/json


> {%
    client.test("Get all product demands" ,function() {
        client.assert(response.status === 200, "Status code is 200");
        client.assert(response.body.page.totalElements === client.global.get("customersTotalDemands"), "Deletion failed, customer's product demand total element didnt match");
        console.log(client.global.get("customersTotalDemands")+"customersTotalDemands"+response.body.page.totalElements);
    });
%}

### Scenario 12: Delete Second Product Demand
DELETE {{baseUrl}}/api/v1/product-demands/{{newProductDemandID2}}
Authorization: Bearer {{auth_token}}
Content-Type: application/json

> {%
    client.test("Product demand has been deleted" ,function() {
        client.assert(response.status === 200, "Status code is 200");
        client.global.set("customersTotalDemands", client.global.get("customersTotalDemands")-1);
        client.global.set("totalDemands", client.global.get("totalDemands")-1);
    });
%}
